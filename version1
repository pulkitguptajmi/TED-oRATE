import random
import time

import speech_recognition as sr

def recognize_speech_from_mic(recognizer, microphone):
    """Transcribe speech from recorded from `microphone`.
    Returns a dictionary with three keys:
    "success": a boolean indicating whether or not the API request was
               successful
    "error":   `None` if no error occured, otherwise a string containing
               an error message if the API could not be reached or
               speech was unrecognizable
    "transcription": `None` if speech could not be transcribed,
               otherwise a string containing the transcribed text
    """
    # check that recognizer and microphone arguments are appropriate type
    if not isinstance(recognizer, sr.Recognizer):
        raise TypeError("`recognizer` must be `Recognizer` instance")

    if not isinstance(microphone, sr.Microphone):
        raise TypeError("`microphone` must be `Microphone` instance")

    # adjust the recognizer sensitivity to ambient noise and record audio
    # from the microphone
    
   
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, timeout=10)
    
    

    # set up the response object
    response = {
        "success": True,
        "error": None,
        "transcription": None
    }

    # try recognizing the speech in the recording
    # if a RequestError or UnknownValueError exception is caught,
    #     update the response object accordingly
    try:
        response["transcription"] = recognizer.recognize_google(audio)
    except sr.RequestError:
        # API was unreachable or unresponsive
        response["success"] = False
        response["error"] = "API unavailable"
    except sr.UnknownValueError:
        # speech was unintelligible
        response["error"] = "Unable to recognize speech"

    return response

if __name__ == "__main__":
    print(" Welcome to TED oRATE: Be TED Ready! ")
    print( " Built by Pulkit Pradeep Gupta (16BCS001) and Abhinav Nirwan (16BCS030) ") 
    print( " Place of inception : Faculty of Engineering & Technology, Jamia Millia Islamia, New Delhi ")


    print(" What is your preference? ")

    # Here we create the Recognizer & Mike instances
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()


    # format the instructions string
    instructions = (
        " Say RECORD to start recording, UPLOAD if you wish to upload a pre-recorded file:\n "
    )

    # show instructions and wait 3 seconds before starting the game
    print(instructions)
    time.sleep(1)
    
    NUM_GUESSES = 1000
    PROMPT_LIMIT = 3
    
    for i in range(NUM_GUESSES):
        for j in range(PROMPT_LIMIT):
            print(' Listening! '.format(i+1))
            chosenOption = recognize_speech_from_mic(recognizer, microphone)
            if chosenOption["transcription"]:
                break
            if not chosenOption["success"]:
                break
            print("I didn't catch that. What did you say?\n")

        # if there was an error, stop the game
        if chosenOption["error"]:
            print("ERROR: {}".format(chosenOption["error"]))
            break

        # show the user the transcription
        #print("You chose to: {}".format(chosenOption["transcription"]))
        
        user_chosen_option = chosenOption["transcription"]
        #print(user_chosen_option)
        
        if user_chosen_option == 'record':
            print(' Woohoo! We are live & recording. Start speaking. ')
            start = time.time()
            spokenWords = recognize_speech_from_mic(recognizer, microphone)
            durationOfUserSpeech = time.time() - start - 3
            
            print("Spoken: {}".format(spokenWords["transcription"]))
            
            text_file = 'sample.txt'
            
            with open(text_file, 'w') as filetowrite:
                filetowrite.write(spokenWords["transcription"])
            
            
        elif user_chosen_option == 'upload' or user_chosen_option == 'load':
            print(' On it, Houston! Uploading your speech.')
            import speech_recognition as sr
            r = sr.Recognizer()

            myAudioFile = sr.AudioFile('testFile.wav')
            with myAudioFile as source:
                audio = r.record(source)
            try:
                s = r.recognize_google(audio)
                text_file = 'sample.txt'
                with open(text_file, 'w') as filetowrite:
                    filetowrite.write(s)
            except Exception as e:
                print("Exception: "+str(e))
                
            import wave
            import contextlib
            fname = 'testFile.wav'
            with contextlib.closing(wave.open(fname,'r')) as f:
                frames = f.getnframes()
                rate = f.getframerate()
                duration = frames / float(rate)
                durationOfUserSpeech = duration

        
        #Beginning of Analysis Module
        
        print('Beginning Analysis...')
        print('')
        killVariable = 0
        for i in range(0,10000):
            killVariable += 1

        #1. Number of words in the speech

        file = open("sample.txt", "rt")
        data = file.read()
        words = data.split()

        numberOfWordsInSpeech = len(words)
        print("-----------"*10)

        print('Number of words in your speech were', numberOfWordsInSpeech)
        print("-----------"*10)
        
        print('Populating recommended duration figure...')
        print('Based on your word count, we recommend having a speech duration of', (numberOfWordsInSpeech/130*60), 'seconds','/',(numberOfWordsInSpeech/130),'minutes')

        #2. Duration of the speech
        print('The duration of your speech was', durationOfUserSpeech, 'seconds','/',durationOfUserSpeech/60,'minutes')
        print("-----------"*10)

        #3. Verdict #1: Speech Pacing
        speechPacePerceived = (numberOfWordsInSpeech/durationOfUserSpeech)*60
        print('Your speech pace was', speechPacePerceived, 'words per minute')
        print('Populating SPEECH PACE verdict...')

        if(speechPacePerceived <= 160 and speechPacePerceived >= 140):
            print('Good Job! Your speech pace is optimal')
        elif(speechPacePerceived < 140):
            print('You might be speaking little slow here. Too slow a speech might turn off your audience')
        else:
            print("Woah! That's too fast. Recommended review if not going in for a Speed-Read competition :)")
        print("-----------"*10)

        #Verdict 2: Filler Words
        fillerWordsList = ['like','ok','okay','right','alright','ummmm','umm','um','ahh','ah','errr','err','er','oh','totally','literally','well','hmmm','hmm','hm','actually','basically','seriously','mhm','uh']

        numberOfFillersDetected = 0

        for word in words:
            if word in fillerWordsList:
                numberOfFillersDetected += 1

        percentageOfFillerWordsDetected = (numberOfFillersDetected/numberOfWordsInSpeech)*100
        print('The percentage of filler words you used in your speech is', percentageOfFillerWordsDetected)
        print('Populating FILLER WORDS verdict...')


        if(percentageOfFillerWordsDetected >= 1.28):
            print('Uh-oh. A lot of filler words there. Try being calm & practice to reduce fillers frequency.')
        else:
            print('Great going! Your speech meets our optimal filler-words criteria')
        print("-----------"*10)

        #Verdit 3: Optimal Opening

        optimalOpenings = ['how many of you', 'years back','in the year','i have a question for you','In two thousand','in nineteen','did you know','how many people here']
        with open("sample.txt", "r") as file:
            firstLineOfSpeech = file.readline()
        print('Analysing your Speech Opening...')
        kyaOptimalLineUseKiyaHai = False
        for opening in optimalOpenings:
            if opening in firstLineOfSpeech:
                print('You started your speech with an enrolling statement/question! Applause!')
                kyaOptimalLineUseKiyaHai = True
                break
                
        
        if(not kyaOptimalLineUseKiyaHai):
            print("Remember, starting off with an enrolling statement gets your audience hooked. Consider tweaking.")
                
                
        print("-----------"*10)

        #Verdict 4: Intent Analysis
        print('Detecting your Speech Intent...')
        import nltk.classify.util
        from nltk.classify import NaiveBayesClassifier
        from nltk.corpus import movie_reviews

        def extract_features(word_list):
            return dict([(word, True) for word in word_list])

        positive_fileids = movie_reviews.fileids('pos')
        negative_fileids = movie_reviews.fileids('neg')

        features_positive = [(extract_features(movie_reviews.words(fileids=[f])),'Positive') for f in positive_fileids]
        features_negative = [(extract_features(movie_reviews.words(fileids=[f])),'Negative') for f in negative_fileids]

        threshold_factor = 0.8
        threshold_positive = int(threshold_factor * len(features_positive))
        threshold_negative = int(threshold_factor * len(features_negative))

        features_train = features_positive[:threshold_positive]+features_negative[:threshold_negative]
        features_test = features_positive[threshold_positive:]+features_negative[threshold_negative:]

        classifier = NaiveBayesClassifier.train(features_train)


        positiveSentences = 0
        negativeSentences = 0
        
        file = open('sample.txt')
        sentences = file.read()
        probdist = classifier.prob_classify(extract_features(sentences.split()))
        pred_sentiment = probdist.max()
        print(pred_sentiment)
        if(pred_sentiment == 'Positive'):
            print("Your overall speech sentiment was perceived by us to be positive. An actual audience would love to be party to it.")
        else:
            print("The intent perceived by us came as Negative. Recommended review.")
            

        print("-----------"*10)




            
            
        
