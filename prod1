import random
import time

import speech_recognition as sr

def recognize_speech_from_mic(recognizer, microphone):
    """Transcribe speech from recorded from `microphone`.
    Returns a dictionary with three keys:
    "success": a boolean indicating whether or not the API request was
               successful
    "error":   `None` if no error occured, otherwise a string containing
               an error message if the API could not be reached or
               speech was unrecognizable
    "transcription": `None` if speech could not be transcribed,
               otherwise a string containing the transcribed text
    """
    # check that recognizer and microphone arguments are appropriate type
    if not isinstance(recognizer, sr.Recognizer):
        raise TypeError("`recognizer` must be `Recognizer` instance")

    if not isinstance(microphone, sr.Microphone):
        raise TypeError("`microphone` must be `Microphone` instance")

    # adjust the recognizer sensitivity to ambient noise and record audio
    # from the microphone
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, timeout=10)

    # set up the response object
    response = {
        "success": True,
        "error": None,
        "transcription": None
    }

    # try recognizing the speech in the recording
    # if a RequestError or UnknownValueError exception is caught,
    #     update the response object accordingly
    try:
        response["transcription"] = recognizer.recognize_google(audio)
    except sr.RequestError:
        # API was unreachable or unresponsive
        response["success"] = False
        response["error"] = "API unavailable"
    except sr.UnknownValueError:
        # speech was unintelligible
        response["error"] = "Unable to recognize speech"

    return response

if __name__ == "__main__":
    print(" Welcome to TED oRATE: Be TED Ready! ")
    print( " Built by Pulkit Pradeep Gupta (16BCS001) and Abhinav Nirwan (16BCS030) ") 
    print( " Place of inception : Faculty of Engineering & Technology, Jamia Millia Islamia, New Delhi ")


    print(" What is your preference? ")

    # Here we create the Recognizer & Mike instances
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()


    # format the instructions string
    instructions = (
        " Say RECORD to start recording, UPLOAD if you wish to upload a pre-recorded file:\n "
    )

    # show instructions and wait 3 seconds before starting the game
    print(instructions)
    time.sleep(1)
    
    NUM_GUESSES = 1000
    PROMT_LIMIT = 3
    
    for i in range(NUM_GUESSES):
        for j in range(PROMPT_LIMIT):
            print(' Listening! '.format(i+1))
            chosenOption = recognize_speech_from_mic(recognizer, microphone)
            if chosenOption["transcription"]:
                break
            if not chosenOption["success"]:
                break
            print("I didn't catch that. What did you say?\n")

        # if there was an error, stop the game
        if chosenOption["error"]:
            print("ERROR: {}".format(chosenOption["error"]))
            break

        # show the user the transcription
        #print("You chose to: {}".format(chosenOption["transcription"]))
        
        user_chosen_option = chosenOption["transcription"]
        
        if user_chosen_option == 'record':
            print(' Woohoo! We are live & recording. Start speaking. ')
            spokenWords = recognize_speech_from_mic(recognizer, microphone)
            print("Spoken: {}".format(spokenWords["transcription"]))
            
            text_file = open("sample.txt", "w")
            text_file.write(spokenWords["transcription"])
            text_file.close()
            
            
        
            
        elif user_chosen_option == 'upload':
            print('.')
